<!--
    THIS EXAMPLE WAS DOWNLOADED FROM https://echarts.apache.org/examples/en/editor.html?c=funnel
-->
<!DOCTYPE html>
<html style="height: 100%">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>
        <script src="/lib/scripts/utils.js"></script>
        <script src="/lib/scripts/env.js"></script>
        <script src="/lib/scripts/jquery.min.js"></script>
        <link href='http://fonts.googleapis.com/css?family=Roboto' rel='stylesheet' type='text/css'>
        <link href="/lib/styles/css" rel="stylesheet" type="text/css">
        <link rel="stylesheet" type="text/css" href="/lib/styles/style.css">
        <script src="https://unpkg.com/mustache@latest"></script>
    </head>


    <body style="height: 100%; margin: 0">
        <div id="container" style="height: 100%"></div>
    </body>

    
        <script type="text/javascript">


//environment_widget = "https://api-dev.askdata.com";
// environment_widget = "https://api-qa.askdata.com"
// environment_widget = "https://api.askdata.com"  // prod  da togliere quando porto su...


$.ajax({

url: environment_widget +"/smartinsight/widgets/" + getUrlParameter('widgetId'),
type: "GET",
async: false,
beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + getToken() 
 ).setRequestHeader('Content-Type','application/json')},
success: function(data) { 
            console.log(data)      
            

            var dom = document.getElementById("container");
            var myChart = echarts.init(dom);
            var app = {};

            var option;
            //  QUI
            // Function to detect the label to show in the graph
            function identify_label(value) {
              labels = ['€', '$', '£', '%'];
              for (let i = 0; i < labels.length; i++) {
                if (value.indexOf(labels[i]) > -1) {
                  return labels[i];
                }
              }
              return '';
            }


            var data_for_bar_race = [];

            var categorie = [];

            for (var i = 0; i < data.fields.m1_id.length; ++i) {
              categorie.push(data.fields.m1_id[i].name);
            }

            var titles = data.fields.s1_id.data;

            try {
              var barcolor = data.fields.s2_id.data;
            } catch (error) {
              console.log("Error", error.name);
              var barcolor = '#0c5a93';
            }

            try {
              var labelcolor = data.fields.s3_id.data;
            } catch (error) {
              console.log("Error", error.name);
              var labelcolor = '#0c5a93';
            }

            try {
              var symbol = identify_label(data.fields.m1_id[0].data[0]);
            } catch (error) {
              console.log("Error", error.name);
              var symbol = '';
            }


            // number of rows to show. If more than 5 I just show 5
            var bars_to_show = categorie.length;
            if (bars_to_show > 5) {
              bars_to_show = 5;
            }

            // Initial value for all rows is 0
            for (var i = 0; i < categorie.length; ++i) {
              data_for_bar_race.push(0);
            }

            console.log(data_for_bar_race);

            // Support variables
            // First is fort title to be updated
            // Second is just an identifier
            labb = '0';
            var count = 0;

            option = {
              title: { text: labb, left: 'center', top: 10 },
              grid: { left: 130, right: 120 },
              xAxis: {
                max: 'dataMax',
                
                axisLabel: {
                  fontSize : 8,
                  show: true,
                  position: 'right',
                  color: labelcolor,
                  formatter: function (d) {
                    return String(d.toLocaleString()) + " " + symbol;
                  }
                }
              },
              yAxis: {
                type: 'category',
                inverse: true,
                data: categorie,
                axisLabel: {
                  color: labelcolor
                },
                animationDuration: 300,
                animationDurationUpdate: 300,
                max: bars_to_show - 1 // only the largest 5 bars will be displayed
              },
              series: [
                {
                  realtimeSort: true,
                  name: 'X',
                  type: 'bar',
                  data: data_for_bar_race,
                  color: barcolor,
                  label: {
                    show: true,
                    position: 'right',
                    color: labelcolor,
                    formatter: function (d) {
                      return String(d.value.toLocaleString()) + " " + symbol;
                    },
                    valueAnimation: true
                  }
                }
              ],
              legend: {
                show: false
              },
              animationDuration: 0,
              animationDurationUpdate: 3000,
              animationEasing: 'linear',
              animationEasingUpdate: 'linear'
            };

            // Update data and labels
            function run() {
              if (count == titles.length) {
                for (var s = 0; i < data_for_bar_race.length; ++s) {
                  data_for_bar_race[s] = data.fields.m1_id[s].rawData[count - 1];
                }
                labb = titles[count - 1];
              } else {
                for (var i = 0; i < data_for_bar_race.length; ++i) {
                  data_for_bar_race[i] = data.fields.m1_id[i].rawData[count];
                }
                labb = titles[count];
                count = count + 1;
              }

              myChart.setOption({
                series: [
                  {
                    type: 'bar',
                    data: data_for_bar_race
                  }
                ],
                title: [
                  {
                    text: labb
                  }
                ]
              });

              // console.log(count)
            }
            setTimeout(function () {
              run();
            }, 10);
            setInterval(function () {
              run();
            }, 4000);
// QUI
            if (option && typeof option === 'object') {
                myChart.setOption(option);
            }
    }
  });
        </script>

</html>