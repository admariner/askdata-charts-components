<!--
    THIS EXAMPLE WAS DOWNLOADED FROM https://echarts.apache.org/examples/en/editor.html?c=funnel
-->
<!DOCTYPE html>
<html style="height: 100%">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
        <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>
        <script src="/lib/scripts/utils.js"></script>
        <script src="/lib/scripts/env.js"></script>
        <script src="/lib/scripts/jquery.min.js"></script>
        <link href='http://fonts.googleapis.com/css?family=Roboto' rel='stylesheet' type='text/css'>
        <link href="/lib/styles/css" rel="stylesheet" type="text/css">
        <link rel="stylesheet" type="text/css" href="/lib/styles/style.css">
        <script src="https://unpkg.com/mustache@latest"></script>
    </head>


    <body style="height: 100%; margin: 0">
        <div id="container" style="height: 100%"></div>
    </body>

    
        <script type="text/javascript">


//environment_widget = "https://api-dev.askdata.com";
// environment_widget = "https://api-qa.askdata.com"
// environment_widget = "https://api.askdata.com"  // prod  da togliere quando porto su...


$.ajax({

url: environment_widget +"/smartinsight/widgets/" + getUrlParameter('widgetId'),
type: "GET",
async: false,
beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + getToken() 
 ).setRequestHeader('Content-Type','application/json')},
success: function(data) { 
            console.log(data)      
            

            var dom = document.getElementById("container");
            var myChart = echarts.init(dom);
            var app = {};

            var option;
//  QUI



function identify_label(value) {
    labels = ["€", "$", "£", "%"];
    for (let i = 0; i < labels.length; i++) {
        if(value.indexOf(labels[i]) > -1){
            return(labels[i])
        }}
            return("")
        }



      // data = { "id": "626175ec781ee95d197e4dcc", "agentId": "3b687a55-af81-4c1a-9fa8-b6f7e626d548", "insightId": "e7768556-fb3c-4f75-a769-31eb1b3f57e3", "componentId": "wdg1", "queryId": "data1", "type": "stats_6_kpi", "fields": { "data1": { "code": "data1", "type": "query", "data": "data1" }, "s1_id": { "code": "data1", "name": "Column1", "type": "resultset", "data": [ "Gen 21","Feb 21", "Mar 21" ], "rawData": [ "Gen 21","Feb 21", "Mar 21" ] }, "m1_id": [ { "code": "COLUMN1", "name": "Column1", "type": "resultset", "data": [ "232","132" ], "rawData": [ 232,132 ] }, { "code": "COLUMN2", "name": "Column2", "type": "resultset", "data": [ "2323","424" ], "rawData": [ 2323,424 ] }, { "code": "COLUMN3", "name": "Column3", "type": "resultset", "data": [ "567","657" ], "rawData": [ 567,657 ] }, { "code": "COLUMN_4", "name": "Column 4", "type": "resultset", "data": [ "234", "974" ], "rawData": [ 234, 974 ] } ] }, "createdAt": "2022-04-21T15:19:08.290Z" };

      var data1 = Object.assign({},data);      


      var data = [];


      var categorie = []

      for (var i = 0; i < data1.fields.m1_id.length; ++i) {
        categorie.push(data1.fields.m1_id[i].name);
      }

      var titles = data1.fields.s1_id.data


      try {
        var barcolor = data1.fields.s2_id.data;
      } catch (error) {
        var barcolor = '#0c5a93';
      }

      try {
        var labelcolor = data1.fields.s3_id.data;
      } catch (error) {
        var labelcolor = '#0c5a93';
      }



      try {
        var symbol = identify_label(data1.fields.m1_id[0].data);
      } catch (error) {
        var symbol = "";
      }


      // var symbol = " €"
      // var cats =  ['VOICE', "CAPACITY", 'DATA ROAMING \n & CONNECTIVITY', 'IP TRANSIT', 'MESSAGING', 'NETWORKING\n SOLUTIONS',  "SPARKLE CLOUD", 'LANDING AND\n CONNECTIVITY\n HUB']

      // var voice = [37821154,  46535284, 54203496, 47278433, 52157095, 59164867,47736691, 56165969,  54310078, 66218240, 51052400, 54078044]
      // var datar =[1389089,1336505,1318379,1631587,1480739,1432100,1716844,2188243,959739, 1200884,1862210,1942294]
      // var ip = [8925025,9281221,10827507,10410788,8996464,13033929,8856714,9068195,12615544,9051561,9135366,16571209]
      // var messaging = [2319710, 2077577,  2829129,  2342813,  2771483,  2225890,  2199349,  3196656,3256643,  3860252,  2559835,  2770564]
      // var network = [3956017, 4240659,  4254764,  4216304,  4186877,  4252795,  5112524,  4934827,  4641680,  5045986,  5205126,  6666506]
      // var cloud = [532056,  508636, 571289, 556150, 596716, 670821, 475513, 737815, 639889, 692539, 487800, 765672,]
      // var hub = [934161, 2707308, 1888744, 940142, 1032699, 1864678, 2655509, 1764213, 1093969, 1491784, 4026901, 1942294]
      // var capacity = [8512759, 8663241,     9489589,   8468723, 9330673, 10783493, 9349694, 9195038,   13415540,    9368518, 14850869, 17145107]
      // titles = ["Jan 21", "Feb 21", "Mar 21", "Apr 21", "Mag 21", "Giu 21", "Lug 21", "Ago 21", "Set 21", "Ott 21", "Nov 21", "Dic 21"]

      var bars_to_show = categorie.length

      if (bars_to_show > 5){
      bars_to_show = 5;
      }



      for (var i = 0; i < categorie.length; ++i) {
        data.push(0);
      }

      console.log(data)


      labb = "0"
      var count = 0



      option = {
        title: {text : labb, left: "center", top: 10},
        grid: {  left: 130, right:120 },
        xAxis: {
          max: 'dataMax',
          
              axisLabel: {
              show: true,
              position: 'right',
              color: labelcolor,
              formatter: function (d) {
                return String(d).replace(/(.)(?=(\d{3})+$)/g, '$1,') + symbol;
              }
            },
          
        },
        yAxis: {
          type: 'category',
          inverse: true,
          data: categorie,
          axisLabel:{
            color: labelcolor,
          },
          animationDuration: 300,
          animationDurationUpdate: 300,
          max: bars_to_show-1 // only the largest 5 bars will be displayed
        },
        series: [
          {
            realtimeSort: true,
            name: 'X',
            type: 'bar',
            data: data,
            color: barcolor,
            label: {
              show: true,
              position: 'right',
              color: labelcolor,
              formatter: function (d) {
                return String(d.value).replace(/(.)(?=(\d{3})+$)/g, '$1,') + symbol;
              },
              valueAnimation: true
            }
          }
        ],
        legend: {
          show: false
        },
        animationDuration: 0,
        animationDurationUpdate: 3000,
        animationEasing: 'linear',
        animationEasingUpdate: 'linear'
      };
      function run() {
        if (count == (titles.length) ) {
          
        for (var s = 0; i < data.length; ++s) {
          
          data[s] = data1.fields.m1_id[s].rawData[count-1]
          
        }
            labb = titles[count-1]
          }
        else{
          for (var i = 0; i < data.length; ++i) {
            
            data[i] = data1.fields.m1_id[i].rawData[count];
          }
          labb = titles[count]
          count = count + 1;
        }
        
        myChart.setOption({
          series: [
            {
              type: 'bar',
              data
            }
          ],
          title :[
            {
              text : labb
              
            }
            ]
        });
        
        // console.log(data)
        // console.log(count)

      }
      setTimeout(function () {
        run();
      }, 10);
      setInterval(function () {
        run();
      }, 4000);



// QUI
            if (option && typeof option === 'object') {
                myChart.setOption(option);
            }
    }
  });
        </script>

</html>