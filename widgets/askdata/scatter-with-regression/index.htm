<!--
    THIS EXAMPLE WAS DOWNLOADED FROM https://echarts.apache.org/examples/en/editor.html?c=scatter-linear-regression
-->
<!DOCTYPE html>
<html style="height: 100%">
    <head>
        <meta charset="utf-8">
        
    	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">


		<!-- These imports are required -->
		
		<script src="/lib/scripts/utils.js"></script>
		
		<script src="/lib/scripts/env.js"></script>
		
		<script src="https://cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>

		<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/echarts@5/dist/echarts.min.js"></script>
		
		
		
		<script src="/lib/scripts/jquery.min.js"></script>
		
		
		<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/echarts-gl@2/dist/echarts-gl.min.js"></script>


        
        
		<!-- These import is needed for calculate regression -->
		<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/echarts-stat@latest/dist/ecStat.min.js"></script>

	
	
		<!-- Default styling -->
		
		<link href="/lib/styles/css" rel="stylesheet" type="text/css">
        <link rel="stylesheet" type="text/css" href="/lib/styles/style.css">
		
	</head>
	
		<body style="height: 100%; width: 100%; margin: 0">
       		<div id="container" style="height: 100%; width: 100%"></div>
   		</body>
		
		
    <script type="text/javascript">
        
        
        

$.ajax({        

url: environment_widget + "/smartinsight/widgets/" + getUrlParameter('widgetId'),
type: "GET",
async: false,
beforeSend: function(xhr){xhr.setRequestHeader('Authorization', 'Bearer ' + getToken() 
 ).setRequestHeader('Content-Type','application/json')},
success: function(data) {
        
	var dom = document.getElementById("container");
	
	var myChart = echarts.init(dom);
	var app = {};
	
	var option;


	// See https://github.com/ecomfe/echarts-stat
	echarts.registerTransform(ecStat.transform.regression);

	
	
	
    
    function check_thousand(value) {
        return value >= 1000;
    }

	
	var dataAll = [[]];
	
	if (data.fields.s2_id.data.every(check_thousand) == true) {
	
        for(var i=0; i<data.fields.s1_id.data.length; i++)
    
        
            dataAll[0].push([parseFloat(data.fields.s1_id.data[i]), parseFloat(data.fields.s2_id.data[i])/1000]);
        
            } 
            else {
                    
                    for(var i=0; i<data.fields.s1_id.data.length; i++)
                    
                    dataAll[0].push([parseFloat(data.fields.s1_id.data[i]), parseFloat(data.fields.s2_id.data[i])]);
                    
            
            }
    
    

	option = {
	
    	dataset: [{
        	source: dataAll[0]
    	}, {
        transform: {
            type: 'ecStat:regression'
            // 'linear' by default.
            // config: { method: 'linear', formulaOn: 'end'}
        }
    	}],
    	
    	
    	xAxis: {
        gridIndex: 0,  offset: 15,
        min: function (value) {
            return Math.round(value.min) - 1;
        },
        max: function (value) {
            return Math.round(value.max) + 1;
        },
        axisLabel: {
            
            fontSize: 20
                    },
        
        },
    	
    	yAxis: {
        gridIndex: 0, offset: 15,
        min: function (value) {
            return Math.round(value.min) - 1;
        },
        max: function (value) {
            return Math.round(value.max) + 1;
        },
        splitNumber: 4,
        axisLabel: {
            fontSize: 20
                    }
                
    },
    series: [{
        name: 'scatter',
        type: 'scatter',
        xAxisIndex: 0,
        yAxisIndex: 0,
        datasetIndex: 0,
    },
    {
        name: 'line',
        type: 'line',
        datasetIndex: 1,
        symbolSize: 0.1,
        xAxisIndex: 0,
        yAxisIndex: 0,
    }]
};

if (option && typeof option === 'object') {
    myChart.setOption(option);
}
}
});

        </script>
</html>
    