<!DOCTYPE html>
<html>
<head>
<title>Askdata - Radar Chart</title>
<!-- Beginning Include Header -->
<!--# include virtual="/charts/askdata/_includes/header.html" -->
<!-- End Include Header -->
</head>
<body>
<!-- Beginning Include Watermak -->
<!--# include virtual="/charts/askdata/_includes/watermark.html" -->
<!-- End Include Watermak -->

<div id="container">
  <canvas id="canvas"></canvas></div>
  <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/echarts@5.3.0/dist/echarts.min.js"></script>

<script>

function displayChart(data) {

// Beinning include prepare-layout
  function calculateScreen() {
    var w = window.innerWidth;
    var h = w/2;
    document.getElementById("container").style.width =  w + "px";
    document.getElementById("container").style.height = h + "px";

  }

  calculateScreen()
// End include prepare-layout
// START

var dom = document.getElementById("container");
var myChart = echarts.init(dom);
var app = {};

var option;

legenda = []
names = []
data_for_indicators = []
data_for_series = []
names = []

for(var i in data.resultSet.dimension.labels){
  legenda.push(data.resultSet.dimension.labels[i])
}

// console.log(legenda)

// Create a variable to store info related to each row
for (let j = 0; j < data.resultSet.dimension.labels.length; j++){
  this["values_"+ j] = [];

}



for(var j in data.resultSet.measures){
  //  Select Row
  var item = data.resultSet.measures[j];
  names.push(item.name)
  for (let x = 0; x < item.numericValues.length; x++){
    (eval("values_" + String(x))).push(item.numericValues[x])
  }

}
// console.log("values_0")
// console.log(values_0)
// console.log("values_1")
// console.log(values_1)



for (let s = 0; s < legenda.length; s++){

  data_for_series.push({value: eval("values_"+ String(s)) , name: legenda[s]}); 

}

// console.log(data_for_series)
console.log("Nomi")
console.log(names)

for (let i = 0; i < names.length; i++)
{ 
  // Find maximum value across all arrays we have
  massimo = 0
  for(var j in legenda.length){
    if (eval("values_"+ String(j)[i])> max){
      console.log(eval("values_"+ String(j)[i]))
      massimo = eval("values_"+ String(j)[i]) 
    }
  }

  data_for_indicators.push({name: names[i], max: massimo + 1/20*massimo}); 
}

console.log(data_for_indicators)


option = {
  tooltip: {
        trigger: 'item'
      },
  title: {
    text: data.title,
    left:"44.5%"
  },
  legend: {
    data: legenda,
    bottom: 5
  },
  radar: {
    // shape: 'circle',
    indicator: data_for_indicators,
    axisName: {
    formatter: '{value}',
    color: '#000000',
    fontSize:19,
    fontFamily: 'roboto'
    },
    axisLabel: {
      show: true,
      showMinLabel: false,
      fontSize:12,
      fontFamily: 'roboto'
    }
  },
  series: [
    {
      name: '',
      type: 'radar',
      data: data_for_series,
      lineStyle: {
        width: 2.5
      }
      
    }
  ]
};

if (option && typeof option === 'object') {
    myChart.setOption(option);
}

// END
}

// Beinning include Request-data
// Retrieve auth token
console.log("Environment: " + environment);
console.log("Data Environment: " + environment_data);

if (getUrlParameter('token') != undefined){
  var token = getUrlParameter('token');
}else{
  var token = Cookies.get('access_token')
}

var theme = []

// Retrieve theme
if (getUrlParameter('theme')) {

    $.getJSON( environment + "/charts/"+getUrlParameter('theme')+"/catalog.json", function( data ) {
      
      console.log("retrieving theme")
      console.log(data)
      
      window.theme = data;

  })

} else {

      $.getJSON( environment + "/charts/askdata/catalog.json", function( data ) {
      
      console.log("retrieving theme")
      console.log(data)
      
      window.theme = data;

     })
}

function setAuthHeader(xhr) {
  if (token) {
    xhr.setRequestHeader('Authorization', 'Bearer ' + token);
  }
  xhr.setRequestHeader('Content-Type', 'application/json');
}

// Request charting data
$.ajax({
         url: environment_data + "/charts/" + getUrlParameter('chartId'),
         type: "GET",
         beforeSend: (xhr) => setAuthHeader(xhr),
         success: function(data) { 

         displayChart(data);

}
});  

// Redirect to login if not authenticated 
$( document ).ajaxError(function( event, jqxhr, settings, exception ) {
    if ( jqxhr.status== 401 ) {
      location.replace(environment_auth+"/login");

    }
});

// End include Request-data

</script>

</body>
</html>
