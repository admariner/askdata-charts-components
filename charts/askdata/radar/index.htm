<!DOCTYPE html>
<html>
<head>
<title>Askdata - Radar Chart</title>
<!-- Beginning Include Header -->
<!--# include virtual="/charts/askdata/_includes/header.html" -->
<!-- End Include Header -->
</head>
<body>
<!-- Beginning Include Watermak -->
<!--# include virtual="/charts/askdata/_includes/watermark.html" -->
<!-- End Include Watermak -->

<div id="container">
  <canvas id="canvas"></canvas></div>
<script>

function displayChart(data) {

// Beinning include prepare-layout
  function calculateScreen() {
    var w = window.innerWidth;
    var h = w/2;
    document.getElementById("container").style.width =  w + "px";
    document.getElementById("container").style.height = h + "px";

  }

  calculateScreen()
// End include prepare-layout

    console.log(data);

    var MONTHS = [data.resultSet.dimension.labels];
    var color = Chart.helpers.color;
    
// delete

    var datasets = [];
    var labels = [];
    var labelMap = {};

    // iterate measures
    for(var j in data.resultSet.measures) {

      console.log(j)
      var item = data.resultSet.measures[j];

      // creaate label for each datasest/measure
      labels.push(item.name)

        var subItemData = [];
        var subItemLabel = [];
        var subItemColor = [];

      // iterate label of the dimension
      for(var i in data.resultSet.dimension.labels) {


        // theme handling
        if (theme.length > 0) {
          item.color = theme.palette[i]
        } else {
          item.color = data.resultSet.color.palette[i];
          if (i==0) {item.color = data.resultSet.color.accent; }
        }
        console.log(data.resultSet.dimension.labels[i])
        console.log(data.resultSet.measures[j].numericValues[i])
        // Add element for label
        labelMap[data.resultSet.dimension.labels[i]].push(data.resultSet.measures[j].numericValues[i]);

    }

  }

    datasets.push({ 
            "label" : subItemLabel,
            "data" : subItemData
        });

    // Show legend if measures more than one
    var displayLegend = true
    
    if (datasets.length == 1) {
      displayLegend = false;

    }

    var chartData = {
      labels: labels,
      datasets: datasets,
    };

    // Todo - replace with dynamic locale, rounding, currency and measurement units
    // Scales should be aggregated by measurement units
    // Color is used as 3rd axis if the measurements units are greaten than 2

    var labelNumberRoundTo = 2;
    var labelNumberLocale = 'en-US';
    var labelFontSize = 20;
    var labelFontFamily = "'Helvetica', sans-serif";
    var lebelNumberCurrency = null;
    var lebelNumberMeasurmenentUnit = null;

      var ctx = document.getElementById('canvas').getContext('2d');
      window.myHorizontalBar = new Chart(ctx, {
        type: 'radar',
        data: chartData,
        options: {
          // Elements options apply to all of the options unless overridden in a dataset
          // In this case, we are setting the border of each horizontal bar to be 2px wide
          elements: {
            rectangle: {
              borderWidth: 2,
            }
          },
            responsive: true,
            maintainAspectRatio: false,
            legend: {
            display : displayLegend,
            position: 'top',
            align: 'center',
            fontSize:30,
            padding: 5,
          },
          title: {
            display: true,
            text: data.title,
            fontSize: 30,
            fontSize: titleSize(data.title),
          },
          elements: {
                        line: {
                                fill: false
                        }
              }
        }
      });
    var colorNames = Object.keys(window.chartColors);

}

// Beinning include Request-data
// Retrieve auth token
console.log("Environment: " + environment);
console.log("Data Environment: " + environment_data);

if (getUrlParameter('token') != undefined){
  var token = getUrlParameter('token');
}else{
  var token = Cookies.get('access_token')
}

var theme = []

// Retrieve theme
if (getUrlParameter('theme')) {

    $.getJSON( environment + "/charts/"+getUrlParameter('theme')+"/catalog.json", function( data ) {
      
      console.log("retrieving theme")
      console.log(data)
      
      window.theme = data;

  })

} else {

      $.getJSON( environment + "/charts/askdata/catalog.json", function( data ) {
      
      console.log("retrieving theme")
      console.log(data)
      
      window.theme = data;

     })
}

function setAuthHeader(xhr) {
  if (token) {
    xhr.setRequestHeader('Authorization', 'Bearer ' + token);
  }
  xhr.setRequestHeader('Content-Type', 'application/json');
}

// Request charting data
$.ajax({
         url: environment_data + "/charts/" + getUrlParameter('chartId'),
         type: "GET",
         beforeSend: (xhr) => setAuthHeader(xhr),
         success: function(data) { 

         displayChart(data);

}
});  

// Redirect to login if not authenticated 
$( document ).ajaxError(function( event, jqxhr, settings, exception ) {
    if ( jqxhr.status== 401 ) {
      location.replace(environment_auth+"/login");

    }
});

// End include Request-data

</script>

</body>
</html>
